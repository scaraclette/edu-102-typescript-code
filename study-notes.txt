Start new temporal project:
npx @temporalio/create@latest hello-world --sample hello-world

Temporal requires that Workflows are deterministic.
- Each execution of a given Workflow must produce the same output given the same input.

Code you develop:
- Worker configuration
- activity definitions
- workflow definitions

Activity Errors
- Activities are intended to encapsulate parts of the Workflow that are prone to failure.
Example activities: Querying a database

Workflow Errors
- Are not associated with a Retry Policy by default. It's possible, but typically uncommon.
In temporal, it's usually preferable to fix the underlying problem that is causing an error 
than to return the error and fail the Workflow.

Cross language interaction
You might use a TypeScript client to execute a Workflow written in Go, which calls one
Activity written in Python and another in Java.

---- Best Practices ----
- Encapsulate all input parameters into a single object, which is passed as input to the 
Workflow or Activity, rather than passing a series of individual fields to these functions.
- Return values from Workflow and Activity Definitions should also be an object.
- Recommend running at least two Worker Processes for each Task Queue in a production application.
- Workflow and Activity Executions are asynchronous operations:
    - client.workflow.execute: execute a workflow execution and wait for the result
    - client.workflow.start: invoke workflow execution in an asynchronous manner.
- See Temporal 102: Accessing Results for example of async activities


Bin Questions:
- Are there any benefits in creating multiple queues?
- When to create multiple queues?
- How can a workflow run for 10 years? Find where the configuration for this is.

Lib Questions:
- How are task queues created?
- Where/how does Temporal store Workflow Executions?

## Timers ##
Delaying workflow execution. Several examples where workflow delays could be done:
- A workflow used for customer onboarding might send e-mail reminders one day, one week, and/or one month after
    they sign up.
- A raw game is created. The workflow to check metadata is triggered/delayed until 10 minutes before game.

Questions:
- Delaying vs scheduling a workflow.

What happens to a timer if the worker crashes?
Be sure to note that the cluster fires the timer after the specified duration, regardless of whether or not 
any Workers happen to be running at that time.
Example:
- Your Workflow code uses sleep to set a Timer for 10 seconds.
    - There is only a single worker
    - Single worker crashes at 3 seconds in.
        - If the worker is restarted 2 seconds later, the Workflow execution is paused for 5 seconds (completes 10 seconds) 
        - If the worker is started 20 minutes later, the Workflow execution is started right away.

## Practice: Durable-execution
Summary: multiple workers can be ran so that if a worker dies, the other worker can pick up the task.
- Let's say there is a 10s within a workflow and the worker dies. If the worker is restarted after the 
sleep time has elapsed, what will happen? -> It will disregard the sleep and execute the activity right away